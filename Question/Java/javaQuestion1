2025.02.25 화요일

1. 자바에서 동기 비동기 차이

- 동기    : 답변(결과)을 기다리는 것 async
즉 상대 클라이언트가 수신 했는지 확인 후 다음 단계로 넘어감
동기에서 수신했는지 답변 올때까지 기다림을 Blocking 이라고 한다.

- 비동기  : 답변(결과)을 기다리지 않는 것 await
즉 상대 클라이언트가 수신 했는지 여부 상관없이 그냥 다음단계로 감
비동기에서 수신했는지 여부 상관없는것을 non-Blocking 이라고 한다.

2. DOM 이란!

웹브라우저가 HTML 문서를 해석하고 해석된 결과를 렌더링해서 화면에 보여줌
이 때 HTML 문서를 해석한 데이터를 DOM 이라고 한다.

브라우저
HTML -> DOM -> 화면

그럼 왜 이걸 하느냐
HTML 문서를 트리 형태로 구조화해서 표현함 / DOM은 JS를 이용해서 웹화면에 콘텐츠 추가 수정 등 이벤트를 처리할 수 있도록
프로그래밍 인터페이스를 제공함

3. 동적 정적 차이
동적 웹 : 움직임 - 이해하기 쉽게 다양하게 다른 화면 보여줌 : 포털 사이트
정적 웹 : 움직이지 않음 - 이해하기 쉽게 매번 같은 화면 보여줌 : 블로그


4. 행과 열
행 ROW -------------->
열 COLUMN 은 세로로 쭉!



2025.02.26 수요일

1. 자바에서 애로우 함수란
- 함수를 간단하고 압축해서 사용하기 위해 나온것

예제)
1. function add(X) { return x + 2 }  add(2)
--> let add = (x) => {return x + 2} console.log(add(2))
// 파라미터가 1개인 경우 소괄호 생략도 가능하다.
--> let add = x => {return x + 2}
// 중괄호 다음에 바로 return 이 나오게 될 경우 return도 생략 가능함
--> let add = x => x + 2


2. 자바에서의 this vs 자바스크립트의 this
- 자바에서의 this : 해당 객체, 인스턴스 자신을 가리키는 참조변수
- 자바스크립트의 this : 동적으로 가리키는 객체 / 전역적으로 바인딩함.

3. 자바에서 MAP 사용 방법
- 리스트나 배열처럼 순차적으로 요소의 값을 구하는 것이 아닌 key를 통해 value를 얻는다.
사용 방법
Map<Stirng, String> map = new HashMAp<String, String>()
Map<Stirng, Integer> map = new HashMAp<String, Integer>()
map.put("", );
Map<Stirng, List<String>> map3 = new HashMAp<String, List<String>>()
List<String> map = ArryaList<String>();
map.add();
map.add();
map3.put("", map)

4. 자바에서 List와 ArrayList 차이
List는 인터페이스 / ArrayList 는 List를 구현한 클래스
List는 ArrayList로 받을 수 있지만 / ArrayList는 ArrayList로만 받아야 한다.
* 여기서 인터페이스란 추상클래스와 비슷, 멤버 변수와 메소드가 포함될 수 있음

5. foreach 란
- 자바 5부터 시작됨
int[] numbers = {1, 2, 3, 4, 5};
for (int number : numbers) { System.out.println(number); }


2025.02.27 목요일

1. 상속 extends 란
상위 클래스(부모) 에서 하위클래스(자식) 에게 본인의 메소드나 변수를 사용할 수 있게 해주는 것
ex) 
public class Employee{
  protected String name; // protected는 하위클래스가 상위 클래스의 접근을 허용하는 접근권한
}
public Employee() {
super();
}
public class RempVO extends Employee{
public RempVO() { // 생성자 메소드
  super() // super는 상위클래스의 생성자를 호출
}
RempVO vo = new RempVO();
vo.name;

2. 생성자란


3. Override
- 동적 바인딩 : 실행 시점에서 사용될 메서드가 결정되는 바인딩
상속관계에서 재정의

Animal x = new Dog();
- 작은게 큰거로 감 -> 업캐스팅
- 부모의 메소드를 자식이 사용함 but 재정의 함 -> override
